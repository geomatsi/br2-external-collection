diff --git a/mjpg-streamer-experimental/plugins/input_uvc/input_uvc.c b/mjpg-streamer-experimental/plugins/input_uvc/input_uvc.c
index 4ba1b9d..10ab697 100644
--- a/mjpg-streamer-experimental/plugins/input_uvc/input_uvc.c
+++ b/mjpg-streamer-experimental/plugins/input_uvc/input_uvc.c
@@ -56,6 +56,29 @@
 
 #define INPUT_PLUGIN_NAME "UVC webcam grabber"
 
+/*
+ * Common webcam resolutions with information from
+ * http://en.wikipedia.org/wiki/Graphics_display_resolution
+ */
+static const struct {
+    const char *string;
+    const int width, height;
+} resolutions[] = {
+    { "QQVGA", 160,  120  },
+    { "QCIF",  176,  144  },
+    { "CGA",   320,  200  },
+    { "QVGA",  320,  240  },
+    { "CIF",   352,  288  },
+    { "PAL",   720,  576  },
+    { "VGA",   640,  480  },
+    { "SVGA",  800,  600  },
+    { "XGA",   1024, 768  },
+    { "HD",    1280, 720  },
+    { "SXGA",  1280, 1024 },
+    { "UXGA",  1600, 1200 },
+    { "FHD",   1920, 1280 },
+};
+
 static const struct {
     const char *string;
     const v4l2_std_id vstd;
@@ -101,6 +124,36 @@ void cam_cleanup(void *);
 void help(void);
 int input_cmd(int plugin, unsigned int control, unsigned int group, int value, char *value_string);
 
+void parse_resolution_opt(const char * optarg, int * width, int * height) {
+    int i;
+
+    /* try to find the resolution in lookup table "resolutions" */
+    for(i = 0; i < LENGTH_OF(resolutions); i++) {
+        if(strcmp(resolutions[i].string, optarg) == 0) {
+            *width  = resolutions[i].width;
+            *height = resolutions[i].height;
+            return;
+        }
+    }
+
+    /* parse value as decimal value */
+    if (sscanf(optarg, "%dx%d", width, height) != 2) {
+        fprintf(stderr, "Invalid height/width '%s' specified!\n", optarg);
+        exit(EXIT_FAILURE);
+    }
+}
+
+void resolutions_help(const char * padding) {
+    int i;
+    for(i = 0; i < LENGTH_OF(resolutions); i++) {
+        fprintf(stderr, "%s ", resolutions[i].string);
+        if((i + 1) % 6 == 0)
+            fprintf(stderr, "\n%s", padding);
+    }
+    fprintf(stderr, "\n%sor a custom value like the following" \
+    "\n%sexample: 640x480\n", padding, padding);
+}
+
 const char *get_name_by_tvnorm(v4l2_std_id vstd) {
 	int i;
 	for (i=0;i<sizeof(norms)/sizeof(norms[0]);i++) {
